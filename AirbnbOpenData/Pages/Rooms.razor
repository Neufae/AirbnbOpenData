@page "/data"
@inject BackendService _backend

<PageTitle>Room Data</PageTitle>

<h1>Room Data</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (rooms == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Host</th>
                <th>Price</th>
                <th>Service Fee</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var room in rooms)
            {
                <tr>
                    <td>@room.name</td>
                    <td>@room.hostName</td>
                    <td>$@room.price</td>
                    <td>$@room.serviceFee</td>
                </tr>
            }
        </tbody>
    </table>
    <div>@(pageNum)/@(roomCount / take)</div>
    <div>
        <button class="btn btn-primary" @onclick="async () => await Prev()" disabled="@prevDisabled">Prev</button>
        <button class="btn btn-primary" @onclick="async () => await Next()">Next</button>
    </div>
}

@code {
    private List<RoomData>? rooms = null;
    int skip = 0;
    int take = 20;
    int pageNum = 1;
    bool prevDisabled = true;
    Stack<string?> pageTokens = [];
    int roomCount = 0;

    private async Task Prev()
    {
        rooms = [];
        skip -= take;
        pageNum--;
        if (skip == 0)
            prevDisabled = true;

        pageTokens.Pop(); // remove next page token
        pageTokens.Pop(); // remove current page token
        var result = await _backend.GetPageAsync(pageTokens.Peek(), take); // get using prev page token
        rooms = result.Data;
        pageTokens.Push(result.NextToken); // re-adds current page token again

        StateHasChanged();
    }

    private async Task Next()
    {
        rooms = [];
        skip += take;
        pageNum++;
        prevDisabled = false;

        var result = await _backend.GetPageAsync(pageTokens.Peek(), take);
        rooms = result.Data;
        pageTokens.Push(result.NextToken);

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        pageTokens.Clear();
        pageTokens.Push(null);
        roomCount = await _backend.GetCountAsync();

        var result = await _backend.GetPageAsync(null, take);
        rooms = result.Data;
        pageTokens.Push(result.NextToken);
    }
}
